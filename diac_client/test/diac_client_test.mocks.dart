// Mocks generated by Mockito 5.2.0 from annotations
// in diac_client/test/diac_client_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:diac_client/src/diac_client.dart' as _i2;
import 'package:diac_client/src/dto/diac_dto.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:url_launcher_platform_interface/url_launcher_platform_interface.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDiacOpts_0 extends _i1.Fake implements _i2.DiacOpts {}

class _FakeDiacPackageInfo_1 extends _i1.Fake implements _i2.DiacPackageInfo {}

/// A class which mocks [UrlLauncherPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncherPlatform extends _i1.Mock
    implements _i3.UrlLauncherPlatform {
  MockUrlLauncherPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> canLaunch(String? url) =>
      (super.noSuchMethod(Invocation.method(#canLaunch, [url]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> launch(String? url,
          {bool? useSafariVC,
          bool? useWebView,
          bool? enableJavaScript,
          bool? enableDomStorage,
          bool? universalLinksOnly,
          Map<String, String>? headers,
          String? webOnlyWindowName}) =>
      (super.noSuchMethod(
          Invocation.method(#launch, [
            url
          ], {
            #useSafariVC: useSafariVC,
            #useWebView: useWebView,
            #enableJavaScript: enableJavaScript,
            #enableDomStorage: enableDomStorage,
            #universalLinksOnly: universalLinksOnly,
            #headers: headers,
            #webOnlyWindowName: webOnlyWindowName
          }),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<void> closeWebView() =>
      (super.noSuchMethod(Invocation.method(#closeWebView, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [DiacApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiacApi extends _i1.Mock implements _i2.DiacApi {
  MockDiacApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DiacOpts get opts => (super.noSuchMethod(Invocation.getter(#opts),
      returnValue: _FakeDiacOpts_0()) as _i2.DiacOpts);
  @override
  _i2.DiacPackageInfo get packageInfo =>
      (super.noSuchMethod(Invocation.getter(#packageInfo),
          returnValue: _FakeDiacPackageInfo_1()) as _i2.DiacPackageInfo);
  @override
  _i4.Future<_i5.DiacConfig?> fetchConfig() =>
      (super.noSuchMethod(Invocation.method(#fetchConfig, []),
              returnValue: Future<_i5.DiacConfig?>.value())
          as _i4.Future<_i5.DiacConfig?>);
}
